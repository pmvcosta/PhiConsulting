import { Widget } from './components';
declare const PopupButton: ({ id, children, style, className, ...props }: import("../../embed/types/base").BaseOptions & import("../../embed/types/base").UrlOptions & import("../../embed/types/base").ActionableOptions & import("../../embed/types/base").BehavioralOptions & import("../../embed/types/base").WidthOption & {
    height?: number | undefined;
} & {
    autoClose?: number | undefined;
    hideScrollbars?: boolean | undefined;
    size?: number | undefined;
    container?: HTMLElement | undefined;
    open?: "time" | "exit" | "load" | "scroll" | undefined;
    openValue?: number | undefined;
} & {
    id: string;
    style?: import("react").CSSProperties | undefined;
    className?: string | undefined;
    children: import("react").ReactNode;
}) => JSX.Element;
declare const SliderButton: ({ id, children, style, className, ...props }: import("../../embed/types/base").BaseOptions & import("../../embed/types/base").UrlOptions & import("../../embed/types/base").ActionableOptions & import("../../embed/types/base").BehavioralOptions & import("../../embed/types/base").WidthOption & {
    position?: "right" | "left" | undefined;
    autoClose?: number | undefined;
    hideScrollbars?: boolean | undefined;
    container?: HTMLElement | undefined;
} & {
    id: string;
    style?: import("react").CSSProperties | undefined;
    className?: string | undefined;
    children: import("react").ReactNode;
}) => JSX.Element;
declare const Popover: ({ id, ...props }: import("../../embed/types/base").BaseOptions & import("../../embed/types/base").UrlOptions & import("../../embed/types/base").ActionableOptions & import("../../embed/types/base").BehavioralOptions & import("../../embed/types/base").WidthOption & {
    height?: number | undefined;
} & {
    autoClose?: number | undefined;
    hideScrollbars?: boolean | undefined;
    size?: number | undefined;
    buttonColor?: string | undefined;
    customIcon?: string | undefined;
    container?: HTMLElement | undefined;
    tooltip?: string | undefined;
    notificationDays?: number | undefined;
} & {
    id: string;
}) => JSX.Element;
declare const Sidetab: ({ id, ...props }: import("../../embed/types/base").BaseOptions & import("../../embed/types/base").UrlOptions & import("../../embed/types/base").ActionableOptions & import("../../embed/types/base").BehavioralOptions & import("../../embed/types/base").WidthOption & {
    height?: number | undefined;
} & {
    buttonText?: string | undefined;
    buttonColor?: string | undefined;
    customIcon?: string | undefined;
} & {
    id: string;
}) => JSX.Element;
export { Widget, PopupButton, SliderButton, Popover, Sidetab };
//# sourceMappingURL=index.d.ts.map